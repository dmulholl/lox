(*
            -------------------
            Operator Precedence
            -------------------

Name            Operators           Associates

Call            ()                  Left
Unary           ! -                 Right
*Bitwise        & |                 Left
Multiplication  / *                 Left
Addition        - +                 Left
Comparison      > >= < <=           Left
Equality        == !=               Left
Logical And     &&                  Left
Logical Or      ||                  Left
*Ternary        ?:                  None
Assignment      =                   Right

*)


(* Statements *)

program := declaration* EOF ;

declaration := fun_declaration | var_declaration | statement ;

fun_declaration := "fun" function ;

function := IDENTIFIER "(" parameters? ")" block ;

parameters := IDENTIFIER ( "," IDENTIFIER )* ;

var_declaration := "var" IDENTIFIER ( "=" expression )? ";" ;

statement := expr_stmt
           | if_stmt
           | print_stmt
           | while_stmt
           | for_stmt
           | return_stmt
           | block ;

expr_stmt := expression ";" ;

if_stmt := "if" "(" expression ")" statement ( "else" statement )? ;

print_stmt := "print" expression ";" ;

while_stmt := while "(" expression ")" statement;

for_stmt := "for"
           "("
           ( var_declaration | expr_stmt | ";" )
           expression? ";"
           expression?
           ")"
           statement ;

return_stmt := "return" expression? ";" ;

block := "{" declaration* "}" ;


(* Expressions *)

expression := assignment ;

assignment := IDENTIFIER "=" assignment | logic_or ;

logic_or := logic_and ( "or" logic_and )* ;

logic_and := equality ( "and" equality )* ;

equality := comparison ( ( "!=" | "==" ) comparison )* ;

comparison := addition ( ( ">" | ">=" | "<" | "<+" ) addition )* ;

addition := multiplication ( ( "-" | "+" ) multiplication )* ;

multiplication := unary ( ( "/" | "*" ) unary )* ;

unary := ( "!" | "-" ) unary | call ;

call := primary ( "(" arguments? ")" )* ;

primary := "true" | "false" | "nil" | "this"
         | NUMBER | STRING
         | "(" expression ")"
         | IDENTIFIER ;

arguments := expression ( "," expression )* ;
